version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: arkaone-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: arkaone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - arkaone-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arkaone-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - arkaone-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.backend
    container_name: arkaone-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password@db:5432/arkaone?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      PORT: 3000
      CORS_ORIGIN: http://localhost
      REDIS_URL: redis://redis:6379
    depends_on:
      - db
      - redis
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    networks:
      - arkaone-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.frontend
    container_name: arkaone-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost/api
    depends_on:
      - backend
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    networks:
      - arkaone-network

  # Reverse Proxy (Caddy)
  proxy:
    image: caddy:2-alpine
    container_name: arkaone-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/docker/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
      - frontend
    networks:
      - arkaone-network

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  arkaone-network:
    driver: bridge
